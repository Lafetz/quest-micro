// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const AddQuest = `-- name: AddQuest :one
INSERT INTO quests (id, owner, email, name, description, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, owner, email, name, description, status
`

type AddQuestParams struct {
	ID          uuid.UUID
	Owner       string
	Email       string
	Name        string
	Description string
	Status      QuestStatus
}

func (q *Queries) AddQuest(ctx context.Context, arg AddQuestParams) (Quest, error) {
	row := q.db.QueryRowContext(ctx, AddQuest,
		arg.ID,
		arg.Owner,
		arg.Email,
		arg.Name,
		arg.Description,
		arg.Status,
	)
	var i Quest
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Name,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const CompleteQuest = `-- name: CompleteQuest :exec
UPDATE quests
SET status = 'completed'
WHERE id = $1
`

func (q *Queries) CompleteQuest(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, CompleteQuest, id)
	return err
}

const GetAssignedQuests = `-- name: GetAssignedQuests :many
SELECT id, owner, email, name, description, status
FROM quests
WHERE email = $1
`

func (q *Queries) GetAssignedQuests(ctx context.Context, email string) ([]Quest, error) {
	rows, err := q.db.QueryContext(ctx, GetAssignedQuests, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quest
	for rows.Next() {
		var i Quest
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Email,
			&i.Name,
			&i.Description,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetQuest = `-- name: GetQuest :one
SELECT id, owner, email, name, description, status
FROM quests
WHERE id = $1
`

func (q *Queries) GetQuest(ctx context.Context, id uuid.UUID) (Quest, error) {
	row := q.db.QueryRowContext(ctx, GetQuest, id)
	var i Quest
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Email,
		&i.Name,
		&i.Description,
		&i.Status,
	)
	return i, err
}
