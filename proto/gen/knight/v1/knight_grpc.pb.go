// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: knight/v1/knight.proto

package knightv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KnightService_AddKnight_FullMethodName       = "/knight.v1.KnightService/AddKnight"
	KnightService_GetKnightStatus_FullMethodName = "/knight.v1.KnightService/GetKnightStatus"
	KnightService_UpdateStatus_FullMethodName    = "/knight.v1.KnightService/UpdateStatus"
	KnightService_GetKnights_FullMethodName      = "/knight.v1.KnightService/GetKnights"
	KnightService_GetKnight_FullMethodName       = "/knight.v1.KnightService/GetKnight"
	KnightService_DeleteKnight_FullMethodName    = "/knight.v1.KnightService/DeleteKnight"
)

// KnightServiceClient is the client API for KnightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnightServiceClient interface {
	AddKnight(ctx context.Context, in *AddKnightRequest, opts ...grpc.CallOption) (*AddKnightResponse, error)
	GetKnightStatus(ctx context.Context, in *GetKnightStatusRequest, opts ...grpc.CallOption) (*GetKnightStatusResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	GetKnights(ctx context.Context, in *GetKnightsRequest, opts ...grpc.CallOption) (*GetKnightsResponse, error)
	GetKnight(ctx context.Context, in *GetKnightRequest, opts ...grpc.CallOption) (*GetKnightResponse, error)
	DeleteKnight(ctx context.Context, in *DeleteKnightRequest, opts ...grpc.CallOption) (*DeleteKnightResponse, error)
}

type knightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnightServiceClient(cc grpc.ClientConnInterface) KnightServiceClient {
	return &knightServiceClient{cc}
}

func (c *knightServiceClient) AddKnight(ctx context.Context, in *AddKnightRequest, opts ...grpc.CallOption) (*AddKnightResponse, error) {
	out := new(AddKnightResponse)
	err := c.cc.Invoke(ctx, KnightService_AddKnight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knightServiceClient) GetKnightStatus(ctx context.Context, in *GetKnightStatusRequest, opts ...grpc.CallOption) (*GetKnightStatusResponse, error) {
	out := new(GetKnightStatusResponse)
	err := c.cc.Invoke(ctx, KnightService_GetKnightStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knightServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, KnightService_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knightServiceClient) GetKnights(ctx context.Context, in *GetKnightsRequest, opts ...grpc.CallOption) (*GetKnightsResponse, error) {
	out := new(GetKnightsResponse)
	err := c.cc.Invoke(ctx, KnightService_GetKnights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knightServiceClient) GetKnight(ctx context.Context, in *GetKnightRequest, opts ...grpc.CallOption) (*GetKnightResponse, error) {
	out := new(GetKnightResponse)
	err := c.cc.Invoke(ctx, KnightService_GetKnight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knightServiceClient) DeleteKnight(ctx context.Context, in *DeleteKnightRequest, opts ...grpc.CallOption) (*DeleteKnightResponse, error) {
	out := new(DeleteKnightResponse)
	err := c.cc.Invoke(ctx, KnightService_DeleteKnight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnightServiceServer is the server API for KnightService service.
// All implementations must embed UnimplementedKnightServiceServer
// for forward compatibility
type KnightServiceServer interface {
	AddKnight(context.Context, *AddKnightRequest) (*AddKnightResponse, error)
	GetKnightStatus(context.Context, *GetKnightStatusRequest) (*GetKnightStatusResponse, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	GetKnights(context.Context, *GetKnightsRequest) (*GetKnightsResponse, error)
	GetKnight(context.Context, *GetKnightRequest) (*GetKnightResponse, error)
	DeleteKnight(context.Context, *DeleteKnightRequest) (*DeleteKnightResponse, error)
	mustEmbedUnimplementedKnightServiceServer()
}

// UnimplementedKnightServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKnightServiceServer struct {
}

func (UnimplementedKnightServiceServer) AddKnight(context.Context, *AddKnightRequest) (*AddKnightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKnight not implemented")
}
func (UnimplementedKnightServiceServer) GetKnightStatus(context.Context, *GetKnightStatusRequest) (*GetKnightStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnightStatus not implemented")
}
func (UnimplementedKnightServiceServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedKnightServiceServer) GetKnights(context.Context, *GetKnightsRequest) (*GetKnightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnights not implemented")
}
func (UnimplementedKnightServiceServer) GetKnight(context.Context, *GetKnightRequest) (*GetKnightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnight not implemented")
}
func (UnimplementedKnightServiceServer) DeleteKnight(context.Context, *DeleteKnightRequest) (*DeleteKnightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnight not implemented")
}
func (UnimplementedKnightServiceServer) mustEmbedUnimplementedKnightServiceServer() {}

// UnsafeKnightServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnightServiceServer will
// result in compilation errors.
type UnsafeKnightServiceServer interface {
	mustEmbedUnimplementedKnightServiceServer()
}

func RegisterKnightServiceServer(s grpc.ServiceRegistrar, srv KnightServiceServer) {
	s.RegisterService(&KnightService_ServiceDesc, srv)
}

func _KnightService_AddKnight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKnightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnightServiceServer).AddKnight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnightService_AddKnight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnightServiceServer).AddKnight(ctx, req.(*AddKnightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnightService_GetKnightStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnightStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnightServiceServer).GetKnightStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnightService_GetKnightStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnightServiceServer).GetKnightStatus(ctx, req.(*GetKnightStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnightService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnightServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnightService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnightServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnightService_GetKnights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnightServiceServer).GetKnights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnightService_GetKnights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnightServiceServer).GetKnights(ctx, req.(*GetKnightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnightService_GetKnight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnightServiceServer).GetKnight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnightService_GetKnight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnightServiceServer).GetKnight(ctx, req.(*GetKnightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnightService_DeleteKnight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnightServiceServer).DeleteKnight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnightService_DeleteKnight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnightServiceServer).DeleteKnight(ctx, req.(*DeleteKnightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KnightService_ServiceDesc is the grpc.ServiceDesc for KnightService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnightService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knight.v1.KnightService",
	HandlerType: (*KnightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddKnight",
			Handler:    _KnightService_AddKnight_Handler,
		},
		{
			MethodName: "GetKnightStatus",
			Handler:    _KnightService_GetKnightStatus_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _KnightService_UpdateStatus_Handler,
		},
		{
			MethodName: "GetKnights",
			Handler:    _KnightService_GetKnights_Handler,
		},
		{
			MethodName: "GetKnight",
			Handler:    _KnightService_GetKnight_Handler,
		},
		{
			MethodName: "DeleteKnight",
			Handler:    _KnightService_DeleteKnight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "knight/v1/knight.proto",
}
